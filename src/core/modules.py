#
# modules.py
#
# The Pashmak Project
# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>
#
# This file is part of Pashmak.
#
# Pashmak is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Pashmak is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.
#########################################################################

""" Internal modules """

modules = {}

modules["hash"] = '#\n# hash.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace hash\n\tfunc blake2b($args)\n\t\t$args = format_args($args)\n\t\t$value = $args[0]\n\t\tpython("self.mem = hashlib.blake2b(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n\tfunc blake2s($args)\n\t\t$args = format_args($args)\n\t\t$value = $args[0]\n\t\tpython("self.mem = hashlib.blake2s(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n\tfunc md5($args)\n\t\t$args = format_args($args)\n\t\t$value = $args[0]\n\t\tpython("self.mem = hashlib.md5(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n\tfunc sha1($args)\n\t\t$args = format_args($args)\n\t\t$value = $args[0]\n\t\tpython("self.mem = hashlib.sha1(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n\tfunc sha224($args)\n\t\t$args = format_args($args)\n\t\t$value = $args[0]\n\t\tpython("self.mem = hashlib.sha224(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n\tfunc sha256($args)\n\t\t$args = format_args($args)\n\t\t$value = $args[0]\n\t\tpython("self.mem = hashlib.sha256(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n\tfunc sha384($args)\n\t\t$args = format_args($args)\n\t\t$value = $args[0]\n\t\tpython("self.mem = hashlib.sha384(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n\tfunc sha3_224($args)\n\t\t$args = format_args($args)\n\t\t$value = $args[0]\n\t\tpython("self.mem = hashlib.sha3_224(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n\tfunc sha3_256($args)\n\t\t$args = format_args($args)\n\t\t$value = $args[0]\n\t\tpython("self.mem = hashlib.sha3_256(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n\tfunc sha3_384($args)\n\t\t$args = format_args($args)\n\t\t$value = $args[0]\n\t\tpython("self.mem = hashlib.sha3_384(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n\tfunc sha3_512($args)\n\t\t$args = format_args($args)\n\t\t$value = $args[0]\n\t\tpython("self.mem = hashlib.sha3_512(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n\tfunc sha512($args)\n\t\t$args = format_args($args)\n\t\t$value = $args[0]\n\t\tpython("self.mem = hashlib.sha512(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n\tfunc shake_128($args)\n\t\t$args = format_args($args)\n\t\tpython("self.mem = hashlib.shake_128(str(self.get_var(\'args\')[0]).encode()).hexdigest(self.get_var(\'args\')[1])")\n\tendfunc\n\tfunc shake_256($args)\n\t\t$args = format_args($args)\n\t\tpython("self.mem = hashlib.shake_256(str(self.get_var(\'args\')[0]).encode()).hexdigest(self.get_var(\'args\')[1])")\n\tendfunc\nendns'
modules["helloworld"] = "#\n# __init__.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nif $__ismain__\n    println('Hello world!')\nendif"
modules["math"] = '#\n# math.pashm\n#\n# The Pashmak Project\n# This Pashmak module is created and developed by mehan alavi majd <mehan.alavi.majd88@gmail.com> \n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n# \n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nns math \n    func acos($num)\n        $num = format_args($num)[0]\n        python("self.mem = math.acos(self.get_var(\'num\'))")\n    endfunc\n    func acosh($num)\n        $num = format_args($num)[0]\n        python("self.mem = math.acosh(self.get_var(\'num\'))")\n    endfunc\n    func ceil($num)\n        $num = format_args($num)[0]\n        python("self.mem = math.ceil(self.get_var(\'num\'))")\n    endfunc\n    func cos($num)\n        $num = format_args($num)[0]\n        python("self.mem = math.cos(self.get_var(\'num\'))")\n    endfunc\n    func degrees($num)\n        $num = format_args($num)[0]\n        python("self.mem = math.degrees(self.get_var(\'num\'))")\n    endfunc\n    func factorial($num)\n        $num = format_args($num)[0]\n        python("self.mem = math.factorial(self.get_var(\'num\'))")\n    endfunc\n    func floor($num)\n        $num = format_args($num)[0]\n        python("self.mem = math.floor(self.get_var(\'num\'))")\n    endfunc\n    $pi = python("self.mem = math.pi")\n    func pow($args)\n        $args = format_args($args)\n        $num = $args[0]\n        $nextnum = $args[1]\n        python("self.mem = math.pow(self.get_var(\'num\'), self.get_var(\'nextnum\'))")\n    endfunc\n    func sin($num)\n        $num = format_args($num)[0]\n        python("self.mem = math.sin(self.get_var(\'num\'))")\n    endfunc\n    func tan($num)\n        $num = format_args($num)[0]\n        python("self.mem = math.tan(self.get_var(\'num\'))")\n    endfunc    \nendns'
modules["os"] = '#\n# os.pashm\n#\n# The Pashmak Project\n# This Pashmak module is created by mehan alavi majd <mehan.alavi.majd88@gmail.com> \n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n# \n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace os\n    $env = python("self.mem = os.environ")\n    func chdir($args)\n        $args = format_args($args)\n        python("os.chdir(self.get_var(\'args\')[0]")\n    endfunc\n    func cpu_count\n        python("self.mem = os.cpu_count()")\n    endfunc\n    func mkdir($args)\n        $args = format_args($args)\n        python("os.mkdir(self.get_var(\'args\')[0])")\n    endfunc\n    $curdir = python("self.mem = os.curdir")\n    func kill($args)\n        $args = format_args($args)\n        $pid = $args[0]\n        $signal = $args[1]\n        python("os.kill(self.get_var(\'pid\'), self.get_var(\'signal\'))")\n    endfunc\n    func rmdir($args)\n        $args = format_args($args)\n        python("os.rmdir(self.get_var(\'args\')[0])")\n    endfunc\n    $osname = python(\'self.mem = os.name\')\n    $pardir = python(\'self.mem = os.path.pardir\')\n    func isdir($args)\n        $args = format_args($args)\n        python("self.mem = os.path.isdir(self.get_var(\'args\')[0])")\n    endfunc\n    func isfile($args)\n        $args = format_args($args)\n        python("self.mem = os.path.isfile(self.get_var(\'args\')[0])")\n    endfunc\n    \n    func exists($args)\n        $args = format_args($args)\n        python("self.mem = os.path.exists(self.get_var(\'args\')[0])")\n    endfunc\n    func cwd\n        python("self.mem = os.getcwd()")\n    endfunc\nendnamespace'
modules["random"] = '#\n# random.pashm\n#\n# The Pashmak Project\n# This Pashmak module is developed by Amirmohammad Ghazi dizaji <amirghazi1387@gmail.com> \n# Copyright 2020 parsa shahmaleki <parsampsh@gmail.com>\n# \n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace random\n    func randint($args)\n        $args = format_args($args)\n        python("self.mem = random.randint(self.get_var(\'args\')[0], self.get_var(\'args\')[1])")\n    endfunc\n    func seed($args)\n        $args = format_args($args)\n        python("random.seed(self.get_var(\'args\')[0])")\n    endfunc\n    \n    func getstate\n        python("self.mem = random.getstate()")\n    endfunc\n    func setstate($args)\n        $args = format_args($args)\n        python("random.setstate(self.get_var(\'args\')[0])")\n    endfunc\n    func getrandbits($args)\n        $args = format_args($args)\n        python("self.mem = random.getrandbits(self.get_var(\'args\')[0])")\n    endfunc\n    func randrange($args)\n        $args = format_args($args)\n        python("self.mem = random.randrange(self.get_var(\'args\')[0], self.get_var(\'args\')[1])")\n    endfunc\n    func choice($args)\n        $args = format_args($args)\n        python("self.mem = random.choice(self.get_var(\'args\')[0])")\n    endfunc\n    func choices($args)\n        $args = format_args($args)\n        python("self.mem = random.choices(self.get_var(\'args\')[0] , self.get_var(\'args\')[1] , self.get_var(\'args\')[2] , self.get_var(\'args\')[3])")\n    endfunc\n    \n    func shuffle($args)\n        $args = format_args($args)\n        python("random.shuffle(self.get_var(\'args\')[0], self.get_var(\'args\')[1])")\n    endfunc\n    func sample($args)\n        $args = format_args($args)\n        python("self.mem = random.sample(self.get_var(\'args\')[0], self.get_var(\'args\')[1])")\n    endfunc\n    func uniform($args)\n        $args = format_args($args)\n        python("self.mem = random.uniform(self.get_var(\'args\')[0], self.get_var(\'args\')[1])")\n    endfunc\n    func triangular($args)\n        $args = format_args($args)\n        python("self.mem = random.triangular(self.get_var(\'args\')[0], self.get_var(\'args\')[1], self.get_var(\'args\')[2])")\n    endfunc\n    func random\n        python("self.mem = random.random()")\n    endfunc\nendns'
modules["stdlib"] = '#\n# stdlib.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nfunc import\n    mem self.import_script(^)\nendfunc\nfunc import_once\n    mem self.import_script(^, True)\nendfunc\nfunc import_run\n    mem self.import_script(^, False, ismain_default=True)\nendfunc\nfunc import_run_once\n    mem self.import_script(^, True, ismain_default=True)\nendfunc\nfunc endns\n    endnamespace\nendfunc\nfunc eval\n    mem self.pashmak_eval(^)\nendfunc\nfunc assert($args)\n    $args = format_args($args)\n    $value = $args[0]\n    if not $value\n        raise(Error(\'AssertError\', \'asserting that false is true\'))\n    endif\nendfunc\nfunc gset($args)\n    $args = format_args($args)\n\tpython(\'self.frames[0]["vars"]["\' + str($args[0]) + \'"] = self.get_var("args")[1]\')\nendfunc\nfunc typeof($obj)\n    python("self.mem = type(self.get_var(\'obj\'))")\nendfunc\nfunc system($args)\n    $args = format_args($args)\n    $cmd = $args[0]\n    python("self.mem = os.system(self.get_var(\'cmd\'))")\nendfunc\nfunc python\n    rmem exec(^)\nendfunc\nfunc required\nendfunc\nfunc py_load_file($args)\n    $args = format_args($args)\n    $path = $args[0]\n\tpython("import importlib.util; spec = importlib.util.spec_from_file_location(\'pyloadedfile\', self.get_var(\'path\')); m = importlib.util.module_from_spec(spec); spec.loader.exec_module(m); self.mem = m")\nendfunc\nfunc fopen($args)\n    $args = format_args($args)\n    $path = $args[0]\n    if len($args) > 1\n        $type = $args[1]\n    else\n        $type = \'r\'\n    endif\n    python("self.mem = open(self.get_var(\'path\'), self.get_var(\'type\'))")\nendfunc\nfunc __namespace__\n    python("self.mem = self.current_namespace()")\nendfunc\nnamespace pashmak\n    func zen\n        println(\'Zen of Pashmak\\n\\\n\\n\\\nThe Zen of Pashmak is a collection of "guiding principles" for writing computer programs that influence the design of the Pashmak programming language. (Like zen of python). This fucking list is written by Mohammad Esmaeili.\\n\\\n\\n\\\n    Fucking syntax is better than beautiful syntax\\n\\\n    English is better than Finglish\\n\\\n    Lossless slow is better than loosing fast\\n\\\n    CatShit is better than DogShit\\n\\\n    DogShit is better than BullShit\\n\\\n    Chaos is better than peace\\n\\\n    Enthropy is better than order\\n\\\n    Crazy is better than logic\\n\\\n    Fun is better than boring\\n\\\n    Happy is better than sad\\n\\\n    Pashm is better than Hash\\n\\\n    While is better than Do-While\\n\\\n    Space is better than Tab\\n\\\n    Also tab is better than Space\\n\\\n    -> is better than .\\n\\\n    if-else is better than switch-case\')\n    endfunc\nendns\nfunc register_shutdown($func)\n    $func = format_args($func)[0]\n    python("self.shutdown_event.append(self.get_var(\'func\'))")\nendfunc\nimport @stdlib.obj\nimport @stdlib.io\nimport @stdlib.func\nimport @stdlib.class\nimport @stdlib.exception'
modules["stdlib.class"] = '#\n# class.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\n# The class super tools\nnamespace class\n    func list\n        # returns list of classes\n        python("self.mem = list(self.classes.keys())")\n    endfunc\n    func exists($args)\n        $args = format_args($args)\n        $name = $args[0]\n        # checks a class exists or not\n        $name = str($name)\n        return $name in class.list()\n    endfunc\n    func delete($args)\n        $args = format_args($args)\n        $name = $args[0]\n        # deletes a class\n        $name = str($name)\n        if not class.exists($name)\n            raise(Error(\'ClassNotFound\', \'class "\' + $name + \'" not found\'))\n            return\n        endif\n        $undeletable_classes = [\'Object\', \'Error\'] # list of undeletable classes\n        if $name in $undeletable_classes\n            raise(Error(\'ClassCannotBeDeleted\', \'class "\' + $name + \'" is a builtin class and cannot be deleted\'))\n        endif\n        # delete the class\n        python("del self.classes[self.get_var(\'name\')]")\n    endfunc\nendns'
modules["stdlib.exception"] = '#\n# exception.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nclass Error\n    $type\n    $messae\n    func __init__($args)\n        $args = format_args($args)\n        $this->type = $args[0]\n        $this->message = $args[1]\n    endfunc\n    func __str__\n        return $this->type + \': \' + $this->message\n    endfunc\nendclass\nfunc raise($args)\n    $args = format_args($args)\n    $ex = $args[0]\n\tpython("self.raise_error(\'" + str($ex->type) + "\', \'" + str($ex->message) + "\')")\nendfunc'
modules["stdlib.func"] = '#\n# func.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\n# The function super tools\nnamespace func\n    func list\n        # returns list of functions\n        python("self.mem = list(self.functions.keys())")\n    endfunc\n    func exists($args)\n        $args = format_args($args)\n        $name = $args[0]\n        # checks a function exists or not\n        $name = str($name)\n        return $name in func.list()\n    endfunc\n    func delete($args)\n        $args = format_args($args)\n        $name = $args[0]\n        # deletes a function\n        $name = str($name)\n        if not func.exists($name)\n            raise(Error(\'FunctionNotFound\', \'function "\' + $name + \'" not found\'))\n            return\n        endif\n        $undeletable_functions = [\'func.list\', \'func.delete\', \'func.exists\', \'gset\', \'py_load_file\', \'system\', \'typeof\', \'required\', \'print\', \'import\', \'println\', \'printl\', \'import_once\', \'mem\', \'rmem\', \'python\', \'endns\', \'exit\', \'eval\', \'raise\', \'assert\', \'read\'] # list of undeletable functions\n        if $name in $undeletable_functions\n            raise(Error(\'FunctionCannotBeDeleted\', \'function "\' + $name + \'" is a builtin function and cannot be deleted\'))\n        endif\n        # delete the function\n        python("del self.functions[self.get_var(\'name\')]")\n    endfunc\nendns\nfunc format_args($args)\n    if type($args) != tuple\n        $args = $args,\n    endif\n    return $args\nendfunc'
modules["stdlib.io"] = '#\n# io.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nfunc print\n    mem self.print(^)\nendfunc\nfunc println($value)\n    print(str($value) + \'\\n\')\nendfunc\nfunc printl($value)\n    println($value)\nendfunc\nfunc perror($value)\n    mem self.print($value, file=sys.stderr)\nendfunc\nfunc printf($args)\n    $args = format_args($args)\n    $obj = $args[0]\n    $file = python("self.mem = sys.stdout")\n    if len($args) > 1\n        $file = $args[1]\n    endif\n    $file->write(str($obj))\nendfunc\nfunc out_start\n    python("self.out_started = True")\nendfunc\nfunc out_end\n    python("self.out_started = False")\nendfunc\nfunc out_clean\n    python("self.out_content = \'\'")\nendfunc\nfunc out_get\n    python("self.mem = self.out_content")\nendfunc\nfunc out_get_clean\n    $content = out_get()\n    out_clean()\n    return $content\nendfunc\nfunc exit($args)\n    $args = format_args($args)\n    $code = $args[0]\n    if typeof($code) != int\n        $code = 0\n    endif\n    python("self.exit_program(self.get_var(\'code\'))")\nendfunc\nfunc read\n    python("self.io_read()")\nendfunc\nfunc var_dump($obj)\n    python("class Tmp:\\n    def write(self, value):\\n        current_prog.current_prog.print(str(value))\\npprint.pprint(self.get_var(\'obj\'), Tmp())")\nendfunc\nfunc die($args)\n    $args = list(format_args($args))\n    if len($args) <= 0\n        $args = [\'\', 1]\n    elif len($args) <= 1\n        $args->append(1)\n    endif\n    if $args[0] == null\n        $args[0] = \'\'\n    endif\n    print($args[0])\n    exit($args[1])\nendfunc'
modules["stdlib.obj"] = '#\n# obj.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nclass Object\n    func __init__\n    endfunc\n    func __str__\n        return \'[PashmakObject name="\' + $this->__name__ + \'"]\'\n    endfunc\n    func isinstanceof($args)\n        $args = format_args($args)\n        $class = $args[0]\n        if typeof($class) != str\n            $class = $class->__name__\n        endif\n        return $class in $this->__inheritance_tree__\n    endfunc\nendclass'
modules["string"] = '#\n# string.pashm\n#\n# The Pashmak Project\n# This Pashmak module is created by Sam Ghasemi or sami2020pro <samprogram2007@gmail.com> \n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n# \n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nns string\n\tfunc concat($args)\n\t\t$args = format_args($args)\n\t\treturn $args[0] + $args[1]\n\tendfunc \n\t\n\tfunc remove_last($str)\n\t\t$str = format_args($str)[0]\n\t\tpython("self.mem = self.get_var(\'str\')[:-1] ")\n\tendfunc\n\tfunc remove_first($str)\n\t\t$str = format_args($str)[0]\n\t\tpython("self.mem = self.get_var(\'str\')[1:]")\n\tendfunc\n\tfunc add_last($args)\n\t\t$args = format_args($args)\n\t\tpython("self.mem = self.get_var(\'args\')[0] + self.get_var(\'args\')[1]")\n\tendfunc\n\tfunc add_first($args)\n\t\t$args = format_args($args)\n\t\tpython("self.mem = self.get_var(\'args\')[1] + self.get_var(\'args\')[0]")\n\tendfunc \n\tfunc length($str)\n\t\t$str = format_args($str)[0]\n\t\tpython("self.mem = len(self.get_var(\'str\'))")\n\tendfunc\n\tfunc cut($args)\n\t\t$args = format_args($args)\n\t\tpython("self.mem = self.get_var(\'args\')[0][self.get_var(\'args\')[1]:self.get_var(\'args\')[2]]")\n\tendfunc \n\tfunc upcase($str)\n\t\t$str = format_args($str)[0]\n\t\tpython("self.mem = self.get_var(\'str\').upper()")\n\tendfunc\n\tfunc lowcase($str)\n\t\t$str = format_args($str)[0]\n\t\tpython("self.mem = self.get_var(\'str\').lower()")\n\tendfunc\n\tfunc reverse($str)\n\t\t$str = format_args($str)[0]\n\t\tpython("self.mem = self.get_var(\'str\')[::-1]")\n\tendfunc\n\tfunc to_str($var)\n\t\t$var = format_args($var)[0]\n\t\tpython("self.mem = repr(self.get_var(\'var\'))")\n\tendfunc\nendns'
modules["sys"] = '#\n# sys.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nimport @sys.path\nnamespace sys\n    $pashmakinfo = {"version": version.version, "pythoninfo": sys.version.replace("\\n", "")}\nendns'
modules["sys.path"] = '#\n# path.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace sys\n    namespace path\n        func add($args)\n            $args = format_args($args)\n            python(\'os.environ["PASHMAKPATH"] += ":\' + str($args[0]) + \':"\')\n            python("self.bootstrap_modules()")\n        endfunc\n        func list\n            $paths_list = python("self.mem = os.environ[\'PASHMAKPATH\'].strip().split(\':\')")\n            $paths_list = [item.strip() for item in $paths_list if item != \'\']\n            return $paths_list\n        endfunc\n    endns\nendns'
modules["tengine"] = '#\n# __init__.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace tengine\n\tfunc include($args)\n\t\t$args = format_args($args)\n\t\t$path = $args[0]\n\t\t$htmldata = {}\n\t\tif len($args) > 1\n\t\t\t$htmldata = $args[1]\n\t\tendif\n\t\ttengine.run_file($path, True, $htmldata)\n\tendfunc\n\tfunc run_file($args)\n\t\t$args = format_args($args)\n\t\t$realtime_run = False\n\t\t$htmldata = {}\n\t\t$path = $args[0]\n\t\tif len($args) > 1\n\t\t\t$realtime_run = $args[1]\n\t\tendif\n\t\tif len($args) > 2\n\t\t\t$htmldata = $args[2]\n\t\tendif\n\t\t$f = fopen($path, \'r\')\n\t\t$content = $f->read()\n\t\t$f->close()\n\t\treturn tengine.run($content, $realtime_run, $path, $htmldata)\n\tendfunc\n\tfunc run($args)\n\t\t$args = format_args($args)\n\t\t$realtime_run = False\n\t\t$__htmldir__ = $__dir__\n\t\t$__htmlfile__ = $__htmldir__ + \'/-\'\n\t\t$content = $args[0]\n\t\t$content = $content->split(\'\\n\', 1)\n\t\tif len($content) > 1\n\t\t\tif $content[0]->startswith(\'#!/\')\n\t\t\t\t$content = $content[1]\n\t\t\telse\n\t\t\t\t$content = \'\\n\'->join($content)\n\t\t\tendif\n\t\telse\n\t\t\t$content = $content[0]\n\t\tendif\n\t\tif len($args) > 1\n\t\t\t$realtime_run = $args[1]\n\t\tendif\n\t\tif len($args) > 2\n\t\t\t$__htmlfile__ = os.path.abspath($args[2])\n\t\t\t$__htmldir__ = os.path.dirname($__htmlfile__)\n\t\tendif\n\t\tif len($args) > 3\n\t\t\t$htmldata = $args[3]\n\t\tendif\n\t\t$randstr_1 = \'<<<therandomstringfortengine\' + str(time.time()) + str(random.random()) + \'>>>\'\n\t\t$randstr_2 = \'<<<therandomstringfortengine\' + str(time.time()) + str(random.random()) + \'>>>\'\n\t\t$content = $content->replace(\'\\{\', $randstr_1)\n\t\t$content = $content->replace(\'\\}\', $randstr_2)\n\t\t$content = $content->replace(\'{{\', \'{=\')\n\t\t$content = $content->replace(\'}}\', \'}\')\n\t\t$parts = $content->split(\'{\')\n\t\t$i = 0\n\t\t$new_parts = []\n\t\tsection tengine_loop1\n\t\t\t$tmp = $parts[$i]->split(\'}\', 1)\n\t\t\tif len($tmp) > 1\n\t\t\t\t$new_parts->append([True, $tmp[0]->replace($randstr_1, \'{\')->replace($randstr_2, \'}\')])\n\t\t\t\t$new_parts->append([False, $tmp[1]->replace($randstr_1, \'{\')->replace($randstr_2, \'}\')])\n\t\t\telse\n\t\t\t\t$new_parts->append([False, $tmp[0]->replace($randstr_1, \'{\')->replace($randstr_2, \'}\')])\n\t\t\tendif\n\t\t\t$i = $i + 1\n\t\tmem $i < len($parts); gotoif tengine_loop1\n\t\t\n\t\t$tengine_i = 0\n\t\t$tengine_parts = $new_parts\n\t\t$tengine_code = \'\'\n\t\tfree $i $new_parts $parts $content $randstr_1 $randstr_2 $tmp\n\t\tsection tengine_loop2\n\t\t\tif $tengine_parts[$tengine_i][0] == True\n\t\t\t\tif $tengine_parts[$tengine_i][1]\n\t\t\t\t\tif $tengine_parts[$tengine_i][1][0] == \'=\'\n\t\t\t\t\t\t$tengine_code = $tengine_code + (\'\\nprint(\' + $tengine_parts[$tengine_i][1][1:] + \')\')\n\t\t\t\t\telse\n\t\t\t\t\t\t$tengine_code = $tengine_code + (\'\\n\' + $tengine_parts[$tengine_i][1])\n\t\t\t\t\tendif\n\t\t\t\tendif\n\t\t\telse\n\t\t\t\t$tengine_code = $tengine_code + (\'\\nprint(base64.b64decode("\' + base64.b64encode($tengine_parts[$tengine_i][1]->encode())->decode() + \'")->decode())\')\n\t\t\tendif\n\t\t\t$tengine_i = $tengine_i + 1\n\t\tmem $tengine_i < len($tengine_parts); gotoif tengine_loop2\n\t\tfree $tengine_i $tengine_parts\n\t\tif $realtime_run\n\t\t\teval($tengine_code)\n\t\telse\n\t\t\tout_start()\n\t\t\teval($tengine_code)\n\t\t\tout_end()\n\t\t\treturn out_get_clean()\n\t\tendif\n\tendfunc\nendns\nif $__ismain__\n\tif len($argv) > 1\n        tengine.run_file($argv[1], True)\n\telse\n        println(\'tengine: File name is required\')\n        exit(1)\n\tendif\nendif'
modules["test"] = '#\n# test.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace test\n    func doAssert($args)\n        $args = format_args($args)\n        $value = $args[0]\n        assert($value)\n    endfunc\n    func assertTrue($args)\n        $args = format_args($args)\n        $value = $args[0]\n        test.doAssert($value)\n    endfunc\n    func assertFalse($args)\n        $args = format_args($args)\n        $value = $args[0]\n        test.doAssert(not $value)\n    endfunc\n    func assertEquals($args)\n        $args = format_args($args)\n        $a = $args[0]\n        $b = $args[1]\n        test.doAssert($a == $b)\n    endfunc\n    func assertNotEquals($args)\n        $args = format_args($args)\n        $a = $args[0]\n        $b = $args[1]\n        test.doAssert($a != $b)\n    endfunc\n    func assertEmpty($args)\n        $args = format_args($args)\n        $value = $args[0]\n        test.doAssert($valie == null)\n    endfunc\n    func assertNotEmpty($args)\n        $args = format_args($args)\n        $value = $args[0]\n        test.doAssert($valie != null)\n    endfunc\nendns'
modules["time"] = '#\n# time.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace time\n    func time\n        python("self.mem = time.time()")\n    endfunc\n    func sleep($args)\n        $args = format_args($args)\n        python("time.sleep(self.get_var(\'args\')[0])")\n    endfunc\n    func ctime\n        python("self.mem = time.ctime()")\n    endfunc\n    func gmtime\n        python("self.mem = time.gmtime()")\n    endfunc\n    func localtime\n        python("self.mem = time.localtime()")\n    endfunc\nendnamespace\nif $__ismain__\n    println("Current UNIX timestamp: " + str(time.time()))\nendif'
modules["webserver"] = '#\n# webserver.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace webserver\n    class WebServer\n        func __init__($args)\n            if typeof($args) != tuple\n                $args = $args,\n            endif\n            $this->host = $args[0]\n            $this->port = $args[1]\n            $this->do_get = null\n            $this->do_post = null\n        endfunc\n        func set_get($func)\n            $this->do_get = $func\n            return $this\n        endfunc\n        func set_post($func)\n            $this->do_post = $func\n            return $this\n        endfunc\n        func serve\n            $py_code = \'\\\\\ndef serve(host, port, do_get=None, do_post=None):\\n\\\n    class TheServer(http.server.BaseHTTPRequestHandler):\\n\\\n        def do_GET(self):\\n\\\n            if self.get_event != None:\\n\\\n                self.get_event(self)\\n\\\n\\\\\n        def do_POST(self):\\n\\\n            if self.post_event != None:\\n\\\n                self.post_event(self)\\n\\\n\\\\\n    tmp_TheServer = copy.deepcopy(TheServer)\\n\\\n    tmp_TheServer.get_event = do_get\\n\\\n    tmp_TheServer.post_event = do_post\\n\\\n    webServer = http.server.HTTPServer((host, port), tmp_TheServer)\\n\\\n    return webServer\\n\\\nself.mem = serve(self.get_var("this").host, self.get_var("this").port, self.get_var("this").do_get, self.get_var("this").do_post)\\n\\\n            \'\n            $this->server = python($py_code)\n            $this->server->serve_forever()\n        endfunc\n    endclass\nendns'
