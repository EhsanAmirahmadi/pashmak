#
# modules.py
#
# The Pashmak Project
# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>
#
# This file is part of Pashmak.
#
# Pashmak is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Pashmak is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.
#########################################################################

""" Internal modules """

# This file is auto generated by `make module`.
# Do Not change this file
# The modules in `src/` folder with `.pashm` extension will be mixed here
# to be accessible in the python code for interpreter cores

modules = {}
""" The builtin modules as dictionary """

modules["compiler"] = '#\n# __init__.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\n@doc "\\\nThe Mixer class gets a file path and crawls in that, finds imports and mixes them\\\n\\n\\\nExample:\\\n    $mixer = Mixer(\'/path/to/file.pashm\')\\\n    # then, finally generated code is accessible:\\\n    println($mixer->total_content)\\\n"\nclass Mixer\n    func __init__(str $path)\n        $this->total_content = \'\'\n        $this->imported_files = []\n        $this->last_is_main = \'True\'\n        $this->crawl($path)\n        $parsed_code = parser.parse($this->total_content, filepath=$path, only_parse=True)\n        $new_content = \'#!/usr/bin/env pashmak\\n\'\n        $i = 0\n        while $i < len($parsed_code)\n            $new_content = $new_content + $parsed_code[$i][\'str\'] + \';\'\n            $i = $i + 1\n        endwhile\n        $this->total_content = $new_content->strip()\n    endfunc\n    @doc "\\\n    Crawls in a path and finds imports\\\n    \\n\\\n    This method is called recursively\\\n    "\n    func crawl(str $path)\n        $path = os.path.abspath($path)\n\t    if os.path.isdir($path)\n\t        $path = $path + \'/__init__.pashm\'\n\t    endif\n        $f = open($path, \'r\')\n        $content = $f->read()\n        $f->close()\n        $parsed_code = parser.parse($content, filepath=$path, only_parse=True)\n        # find the import commands\n        $i = 0\n        while $i < len($parsed_code)\n            if $parsed_code[$i][\'command\'] == \'import\' or $parsed_code[$i][\'command\'] == \'import_once\'\n                $import_cmd_arg = False\n                try error\n                    $__old_dir__ = $__dir__\n                    $__old_file__ = $__file__\n                    $__dir__ = os.path.dirname($path)\n                    $__file__ = $path\n                    $import_cmd_arg = python(\'self.mem = self.eval(\' + repr($parsed_code[$i][\'args_str\']) + \')\')\n                    $__dir__ = $__old_dir__\n                    $__file__ = $__old_file__\n                endtry; goto after_error; section error\n                section after_error\n                if $import_cmd_arg != False\n                    if typeof($import_cmd_arg) != tuple\n                        $import_cmd_arg = $import_cmd_arg,\n                    endif\n                    $import_cmd_arg = list($import_cmd_arg)\n                    $x = 0\n                    while $x < len($import_cmd_arg)\n                        if $import_cmd_arg[$x]\n                            if $import_cmd_arg[$x][0] == \'@\'\n                                $this->total_content = $this->total_content + $parsed_code[$i][\'str\'] + \'\\n\'\n                                $x = $x + 1\n                                continue\n                            endif\n                        endif\n                        $import_cmd_arg[$x] = os.path.abspath($import_cmd_arg[$x])\n                        if ($import_cmd_arg[$x] not in $this->imported_files) or $parsed_code[$i][\'command\'] != \'import_once\'\n                            $this->total_content = $this->total_content + \'$__ismain__ = False\\n\'\n                            $tmp_last_is_main = $this->last_is_main\n                            $this->last_is_main = \'False\'\n                            $this->crawl($import_cmd_arg[$x])\n                            $this->imported_files->append($import_cmd_arg[$x])\n                            $this->total_content = $this->total_content + \'$__ismain__ = \' + $tmp_last_is_main + \'\\n\'\n                            $this->last_is_main = $tmp_last_is_main\n                        endif\n                        $x = $x + 1\n                    endwhile\n                endif\n            else\n                $this->total_content = $this->total_content + $parsed_code[$i][\'str\'] + \'\\n\'\n            endif\n            $i = $i + 1\n        endwhile\n    endfunc\nendclass\nif $__ismain__\n    if len($argv) <= 1\n        println(\'ERROR: script filename is required\')\n        exit(1)\n    endif\n    $mix = Mixer($argv[1])\n    if len($argv) <= 2\n        println($mix->total_content)\n    else\n        $out_file_path = $argv[2]\n        $f = open($out_file_path, \'w\')\n        $f->write($mix->total_content)\n        $f->close()\n    endif\nendif'
modules["hash"] = '#\n# hash.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace hash\n    @doc """\\\n    Calculates blake2b hash\\\n    \\n\\\n    Args:\\\n        0. value: value that you want to hash\\\n    """\n\tfunc str::blake2b(str $value)\n\t\treturn python("self.mem = hashlib.blake2b(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n    @doc """\\\n    Calculates blake2s hash\\\n    \\n\\\n    Args:\\\n        0. value: value that you want to hash\\\n    """\n\tfunc str::blake2s(str $value)\n\t\treturn python("self.mem = hashlib.blake2s(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n    @doc """\\\n    Calculates md5 hash\\\n    \\n\\\n    Args:\\\n        0. value: value that you want to hash\\\n    """\n\tfunc str::md5(str $value)\n\t\treturn python("self.mem = hashlib.md5(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n    @doc """\\\n    Calculates sha1 hash\\\n    \\n\\\n    Args:\\\n        0. value: value that you want to hash\\\n    """\n\tfunc str::sha1(str $value)\n\t\treturn python("self.mem = hashlib.sha1(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n    @doc """\\\n    Calculates sha224 hash\\\n    \\n\\\n    Args:\\\n        0. value: value that you want to hash\\\n    """\n\tfunc str::sha224(str $value)\n\t\treturn python("self.mem = hashlib.sha224(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n    @doc """\\\n    Calculates sha256 hash\\\n    \\n\\\n    Args:\\\n        0. value: value that you want to hash\\\n    """\n\tfunc str::sha256(str $value)\n\t\treturn python("self.mem = hashlib.sha256(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n    @doc """\\\n    Calculates sha384 hash\\\n    \\n\\\n    Args:\\\n        0. value: value that you want to hash\\\n    """\n\tfunc str::sha384(str $value)\n\t\treturn python("self.mem = hashlib.sha384(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n    @doc """\\\n    Calculates sha3_224 hash\\\n    \\n\\\n    Args:\\\n        0. value: value that you want to hash\\\n    """\n\tfunc str::sha3_224(str $value)\n\t\treturn python("self.mem = hashlib.sha3_224(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n    @doc """\\\n    Calculates sha3_256 hash\\\n    \\n\\\n    Args:\\\n        0. value: value that you want to hash\\\n    """\n\tfunc str::sha3_256(str $value)\n\t\treturn python("self.mem = hashlib.sha3_256(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n    @doc """\\\n    Calculates sha3_384 hash\\\n    \\n\\\n    Args:\\\n        0. value: value that you want to hash\\\n    """\n\tfunc str::sha3_384(str $value)\n\t\treturn python("self.mem = hashlib.sha3_384(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n    @doc """\\\n    Calculates sha3_512 hash\\\n    \\n\\\n    Args:\\\n        0. value: value that you want to hash\\\n    """\n\tfunc str::sha3_512(str $value)\n\t\treturn python("self.mem = hashlib.sha3_512(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n    @doc """\\\n    Calculates sha512 hash\\\n    \\n\\\n    Args:\\\n        0. value: value that you want to hash\\\n    """\n\tfunc str::sha512(str $value)\n\t\treturn python("self.mem = hashlib.sha512(self.get_var(\'value\').encode()).hexdigest()")\n\tendfunc\n    @doc """\\\n    Calculates shake_128 hash\\\n    \\n\\\n    Args:\\\n        0. value: value that you want to hash\\\n        1. length\\\n    """\n\tfunc str::shake_128(str $value, int $length)\n\t\treturn python("self.mem = hashlib.shake_128(str(self.get_var(\'value\')).encode()).hexdigest(self.get_var(\'length\'))")\n\tendfunc\n    @doc """\\\n    Calculates shake_256 hash\\\n    \\n\\\n    Args:\\\n        0. value: value that you want to hash\\\n        1. length\\\n    """\n\tfunc str::shake_256(str $value, int $length)\n\t\treturn python("self.mem = hashlib.shake_256(str(self.get_var(\'value\')).encode()).hexdigest(self.get_var(\'length\'))")\n\tendfunc\nendns'
modules["helloworld"] = "#\n# __init__.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nif $__ismain__\n    println('Hello world!')\nendif"
modules["math"] = '#\n# math.pashm\n#\n# The Pashmak Project\n# This Pashmak module is created and developed by mehan alavi majd <mehan.alavi.majd88@gmail.com> \n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n# \n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nns math\n    @doc """\\\n    Returns the arc cosine of a number. Recives a number between `1` and `-1`.\\\n    """\n    func acos($num)\n        return python("self.mem = math.acos(self.get_var(\'num\'))")\n    endfunc\n    @doc """\\\n    Returns the inverse hyperbolic cosine of a number.\\\n    """\n    func acosh($num)\n        return python("self.mem = math.acosh(self.get_var(\'num\'))")\n    endfunc\n    @doc """\\\n    Rounds a number upward to its nearest integer.\\\n    """\n    func ceil($num)\n        return python("self.mem = math.ceil(self.get_var(\'num\'))")\n    endfunc\n    @doc """\\\n    Finds the cosine of a number.\\\n    """\n    func cos($num)\n        return python("self.mem = math.cos(self.get_var(\'num\'))")\n    endfunc\n    @doc """\\\n    Converts angles from radians to degrees.\\\n    """\n    func degrees($num)\n        return python("self.mem = math.degrees(self.get_var(\'num\'))")\n    endfunc\n    @doc """\\\n    Finds the factorial of a number.\\\n    """\n    func factorial($num)\n        return python("self.mem = math.factorial(self.get_var(\'num\'))")\n    endfunc\n    @doc """\\\n    Rounds numbers down to the nearest integer.\\\n    """\n    func floor($num)\n        return python("self.mem = math.floor(self.get_var(\'num\'))")\n    endfunc\n    $pi = python("self.mem = math.pi")\n    @doc """\\\n    Finds the value of x raised to the power of y.\\n\\\n    Example: math.pow(9, 3)\\\n    """\n    func pow($num, $nextnum)\n        return python("self.mem = math.pow(self.get_var(\'num\'), self.get_var(\'nextnum\'))")\n    endfunc\n    @doc """\\\n    Finds the sine of a number.\\\n    """\n    func sin($num)\n        return python("self.mem = math.sin(self.get_var(\'num\'))")\n    endfunc\n    @doc """\\\n    Finds the tangent of a number (angle).\\\n    """\n    func tan($num)\n        return python("self.mem = math.tan(self.get_var(\'num\'))")\n    endfunc\nendns'
modules["os"] = '#\n# os.pashm\n#\n# The Pashmak Project\n# This Pashmak module is created by mehan alavi majd <mehan.alavi.majd88@gmail.com> \n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n# \n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace os\n    $env = python("self.mem = os.environ")\n    @doc """\\\n    Changes program working directory to new path.\\n\\\n    Gets path as string.\\\n    """\n    func chdir(str $dirpath)\n        python("os.chdir(self.get_var(\'dirpath\')")\n    endfunc\n    @doc """\\\n    Returns CPU count.\\\n    """\n    func cpu_count\n        python("self.mem = os.cpu_count()")\n    endfunc\n    @doc """\\\n    Makes a directory.\\n\\\n    Gets directory path as string.\\\n    """\n    func mkdir(str $dirpath)\n        python("os.mkdir(self.get_var(\'dirpath\'))")\n    endfunc\n    $curdir = python("self.mem = os.curdir")\n    @doc """\\\n    Kills a process.\\n\\\n    First argument is process ID as int.\\n\\\n    Second argument is the signal.\\\n    """\n    func kill(int $pid, int $signal=1)\n        python("os.kill(self.get_var(\'pid\'), self.get_var(\'signal\'))")\n    endfunc\n    @doc """\\\n    Removes a directory.\\n\\\n    Gets directory path as string.\\\n    """\n    func rmdir(str $dirpath)\n        python("os.rmdir(self.get_var(\'dirpath\'))")\n    endfunc\n    $osname = python(\'self.mem = os.name\')\n    $pardir = python(\'self.mem = os.path.pardir\')\n    @doc """\\\n    Checks is a path directory.\\n\\\n    Gets path as string.\\n\\\n    Returns Boolean.\\n\\\n    """\n    func isdir(str $dirpath)\n        python("self.mem = os.path.isdir(self.get_var(\'dirpath\'))")\n    endfunc\n    @doc """\\\n    Checks is a path file.\\n\\\n    Gets path as string.\\n\\\n    Returns Boolean.\\n\\\n    """\n    func isfile(str $path)\n        python("self.mem = os.path.isfile(self.get_var(\'path\'))")\n    endfunc\n    @doc """\\\n    Checks a path exists.\\n\\\n    Gets path as string.\\n\\\n    Returns Boolean.\\\n    """\n    func exists(str $path)\n        python("self.mem = os.path.exists(self.get_var(\'path\'))")\n    endfunc\n    @doc """\\\n    Returns program current working directory as string.\\\n    """\n    func cwd\n        python("self.mem = os.getcwd()")\n    endfunc\nendnamespace'
modules["pit"] = '#\n# __init__.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace pit\n\tfunc include(str $path, dict $htmldata={})\n\t\trun_file($path, True, $htmldata)\n\tendfunc\n\tfunc run_file(str $path, bool $realtime_run=true, dict $htmldata={})\n\t\t$f = fopen($path, \'r\')\n\t\t$content = $f->read()\n\t\t$f->close()\n\t\treturn run($content, $realtime_run, $path, $htmldata)\n\tendfunc\n\tfunc run(str $content, bool $realtime_run=false, str $path=null, dict $htmldata={})\n\t\t$__htmldir__ = $__dir__\n\t\t$__htmlfile__ = $__htmldir__ + \'/-\'\n\t\t$content = $content->split(\'\\n\', 1)\n\t\tif len($content) > 1\n\t\t\tif $content[0]->startswith(\'#!/\')\n\t\t\t\t$content = $content[1]\n\t\t\telse\n\t\t\t\t$content = \'\\n\'->join($content)\n\t\t\tendif\n\t\telse\n\t\t\t$content = $content[0]\n\t\tendif\n\t\tif $path != null\n\t\t\t$__htmlfile__ = os.path.abspath($path)\n\t\t\t$__htmldir__ = os.path.dirname($__htmlfile__)\n\t\tendif\n\t\t$randstr_1 = \'<<<therandomstringforpit\' + str(time.time()) + str(random.random()) + \'>>>\'\n\t\t$randstr_2 = \'<<<therandomstringforpit\' + str(time.time()) + str(random.random()) + \'>>>\'\n\t\t$content = $content->replace(\'\\{\', $randstr_1)\n\t\t$content = $content->replace(\'\\}\', $randstr_2)\n\t\t$content = $content->replace(\'{{\', \'{=\')\n\t\t$content = $content->replace(\'}}\', \'}\')\n\t\t$parts = $content->split(\'{\')\n\t\t$i = 0\n\t\t$new_parts = []\n\t\twhile $i < len($parts)\n\t\t\t$tmp = $parts[$i]->split(\'}\', 1)\n\t\t\tif len($tmp) > 1\n\t\t\t\t$new_parts->append([True, $tmp[0]->replace($randstr_1, \'{\')->replace($randstr_2, \'}\')])\n\t\t\t\t$new_parts->append([False, $tmp[1]->replace($randstr_1, \'{\')->replace($randstr_2, \'}\')])\n\t\t\telse\n\t\t\t\t$new_parts->append([False, $tmp[0]->replace($randstr_1, \'{\')->replace($randstr_2, \'}\')])\n\t\t\tendif\n\t\t\t$i = $i + 1\n\t\tendwhile\n\t\t\n\t\t$pit_i = 0\n\t\t$pit_parts = $new_parts\n\t\t$pit_code = \'\'\n\t\tfree(\'i\')\n\t\tfree(\'new_parts\')\n\t\tfree(\'parts\')\n\t\tfree(\'content\')\n\t\tfree(\'randstr_1\')\n\t\tfree(\'randstr_2\')\n\t\tfree(\'tmp\')\n\t\twhile $pit_i < len($pit_parts)\n\t\t\tif $pit_parts[$pit_i][0] == True\n\t\t\t\tif $pit_parts[$pit_i][1]\n\t\t\t\t\tif $pit_parts[$pit_i][1][0] == \'=\'\n\t\t\t\t\t\t$pit_code = $pit_code + (\'\\nprint(\' + $pit_parts[$pit_i][1][1:] + \')\')\n\t\t\t\t\telse\n\t\t\t\t\t\t$pit_code = $pit_code + (\'\\n\' + $pit_parts[$pit_i][1])\n\t\t\t\t\tendif\n\t\t\t\tendif\n\t\t\telse\n\t\t\t\t$pit_code = $pit_code + (\'\\nprint(base64.b64decode("\' + base64.b64encode($pit_parts[$pit_i][1]->encode())->decode() + \'")->decode())\')\n\t\t\tendif\n\t\t\t$pit_i = $pit_i + 1\n\t\tendwhile\n\t\tfree(\'pit_i\')\n\t\tfree(\'pit_parts\')\n\t\tif $realtime_run\n\t\t\teval($pit_code)\n\t\telse\n\t\t\tout_start()\n\t\t\teval($pit_code)\n\t\t\tout_end()\n\t\t\treturn out_get_clean()\n\t\tendif\n\tendfunc\nendns\nif $__ismain__\n\tif len($argv) > 1\n        pit.run_file($argv[1], True)\n\telse\n        println(\'pit: File name is required\')\n        exit(1)\n\tendif\nendif'
modules["random"] = '#\n# random.pashm\n#\n# The Pashmak Project\n# This Pashmak module is developed by Amirmohammad Ghazi dizaji <amirghazi1387@gmail.com> \n# Copyright 2020 parsa shahmaleki <parsampsh@gmail.com>\n# \n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace random\n    @doc """\\\n    Generates a random number between x and y.\\n\\\n    First and second arguments are x and y as number.\\\n    """\n    func randint($a, $b)\n        python("self.mem = random.randint(self.get_var(\'a\'), self.get_var(\'b\'))")\n    endfunc\n    @doc """\\\n    Initializes Random number generator.\\n\\\n    Gets seed as integer.\\\n    """\n    func seed($a)\n        python("random.seed(self.get_var(\'a\'))")\n    endfunc\n    @doc """\\\n    Returns the current internal state of the random number generator.\\\n    """\n    func getstate\n        python("self.mem = random.getstate()")\n    endfunc\n    func setstate($state)\n        python("random.setstate(self.get_var(\'state\'))")\n    endfunc\n    func getrandbits($a)\n        python("self.mem = random.getrandbits(self.get_var(\'a\'))")\n    endfunc\n    func randrange($a, $b)\n        python("self.mem = random.randrange(self.get_var(\'a\'), self.get_var(\'b\'))")\n    endfunc\n    ### TODO : fix bug of this functions\n    ### func choice($a)\n    ###     python("self.mem = random.choice(self.get_var(\'a\'))")\n    ### endfunc\n    ###\n    ### func choices($a, $b, $c, $d)\n    ###     $args = format_args($args)\n    ###     python("self.mem = random.choices(self.get_var(\'a\'), self.get_var(\'b\'), self.get_var(\'c\'), self.get_var(\'d\'))")\n    ### endfunc\n    \n    func shuffle($a, $b)\n        python("random.shuffle(self.get_var(\'a\'), self.get_var(\'b\'))")\n    endfunc\n    func sample($a, $b)\n        python("self.mem = random.sample(self.get_var(\'a\'), self.get_var(\'b\'))")\n    endfunc\n    func uniform($a, $b)\n        python("self.mem = random.uniform(self.get_var(\'a\'), self.get_var(\'b\'))")\n    endfunc\n    func triangular($a $b, $c)\n        python("self.mem = random.triangular(self.get_var(\'a\'), self.get_var(\'b\'), self.get_var(\'c\'))")\n    endfunc\n    @doc """\\\n    Generates a random float less that 1.\\\n    """\n    func random\n        python("self.mem = random.random()")\n    endfunc\nendns'
modules["serve"] = '#\n# __init__.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nif $__ismain__\n    import_run @web.server\nendfunc'
modules["stdlib"] = '#\n# stdlib.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\n@doc "Runs a python code from string"\nfunc python\n    rmem exec(^)\nendfunc\n@doc """\\\nImports a script or a module.\\n\\\nGets script/module name as string.\\\n"""\nfunc import\n    mem self.import_script(^)\nendfunc\n@doc """\\\nIs like `import()`, but checks if module or script already is imported, do not imports again.\\\nGets module or script name as string.\\\n"""\nfunc import_once\n    mem self.import_script(^, True)\nendfunc\n@doc """\\\nIs like `import()`, But sets `$__ismain__` to `True` for module(run mode).\\\n"""\nfunc import_run\n    mem self.import_script(^, False, ismain_default=True)\nendfunc\n@doc """\\\nIs like `import_run` but checks script is already imported like `import_once`.\\\n"""\nfunc import_run_once\n    mem self.import_script(^, True, ismain_default=True)\nendfunc\n@doc """\\\nGets a Pashmak code as string and runs that.\\\n"""\nfunc eval\n    mem self.pashmak_eval(^)\nendfunc\n@doc """\\\nAsserts a value, if it\'s not True, raises AssertError.\\\n"""\nfunc assert($value)\n    if not $value\n        raise(Error(\'AssertError\', \'asserting that false is true\'))\n    endif\nendfunc\n@doc """\\\nSets a global variable.\\n\\\nGets variable name as first argument and value as second.\\\n"""\nfunc gset($name, $value=null)\n\tpython(\'self.frames[0]["vars"][\' + repr($name) + \'] = self.get_var("value")\')\nendfunc\n@doc """\\\nReturns a global variable. Gets variable name as string.\\\n"""\nfunc gget($name)\n\tpython(\'self.mem = self.frames[0]["vars"][\' + repr($name) + \']\')\nendfunc\n@doc """\\\nGets a object/variable and returns type of that.\\\n"""\nfunc typeof(*$obj)\n    python("self.mem = type(self.get_var(\'obj\'))")\nendfunc\n@doc """\\\nRuns a system shell command and returns exit code.\\n\\\nGets command as string and returns exit code as int.\\\n"""\nfunc system($cmd)\n    python("self.mem = os.system(self.get_var(\'cmd\'))")\nendfunc\n@doc """\\\nLoads a python file script as a python module object.\\n\\\nGets script file path as string and returns loaded object.\\\n"""\nfunc py_load_file($path)\n\tpython("import importlib.util; spec = importlib.util.spec_from_file_location(\'pyloadedfile\', self.get_var(\'path\')); m = importlib.util.module_from_spec(spec); spec.loader.exec_module(m); self.mem = m")\nendfunc\n@doc """\\\nReturns current namespace as string.\\\n"""\nfunc str::__namespace__\n    return python("self.mem = self.current_namespace()")\nendfunc\nnamespace pashmak\n    @doc """\\\n    Prints zen of Pashmak.\\\n    """\n    func zen\n        println(\'Zen of Pashmak\\n\\\n\\n\\\nThe Zen of Pashmak is a collection of "guiding principles" for writing computer programs that influence the design of the Pashmak programming language. (Like zen of python). This fucking list is written by Mohammad Esmaeili.\\n\\\n\\n\\\n    Fucking syntax is better than beautiful syntax\\n\\\n    English is better than Finglish\\n\\\n    Lossless slow is better than loosing fast\\n\\\n    CatShit is better than DogShit\\n\\\n    DogShit is better than BullShit\\n\\\n    Chaos is better than peace\\n\\\n    Enthropy is better than order\\n\\\n    Crazy is better than logic\\n\\\n    Fun is better than boring\\n\\\n    Happy is better than sad\\n\\\n    Pashm is better than Hash\\n\\\n    While is better than Do-While\\n\\\n    Space is better than Tab\\n\\\n    Also tab is better than Space\\n\\\n    -> is better than .\\n\\\n    if-else is better than switch-case\')\n    endfunc\nendns\n@doc """\\\nAdds a function to shutdown event.\\n\\\nShutdown event functions will be run one by one in end of program.\\n\\\nGets function object as argument.\\\n"""\nfunc register_shutdown($func)\n    python("self.shutdown_event.append(self.get_var(\'func\'))")\nendfunc\nimport @stdlib.obj\nimport @stdlib.io\nimport @stdlib.func\nimport @stdlib.class\nimport @stdlib.defines\nimport @stdlib.exception\nfunc fopen; endfunc\nfopen = open'
modules["stdlib.class"] = '#\n# class.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\n# The class super tools\nnamespace class\n    @doc """\\\n    Returns list of defined classes as list of strings(name of class).\\\n    """\n    func list()\n        # returns list of classes\n        return python("self.mem = list(self.classes.keys())")\n    endfunc\n    @doc """\\\n    Checks a class exists.\\n\\\n    Gets class name as string.\\n\\\n    Returns boolean.\\\n    """\n    func bool::exists(string $name)\n        # checks a class exists or not\n        $name = str($name)\n        return $name in class.list()\n    endfunc\n    @doc """\\\n    Deletes a class.\\n\\\n    Gets class name as string.\\n\\\n    (This Cannot delete builtin classes).\\\n    """\n    func delete(string $name)\n        # deletes a class\n        $name = str($name)\n        if not class.exists($name)\n            raise(Error(\'ClassNotFound\', \'class "\' + $name + \'" not found\'))\n            return\n        endif\n        $undeletable_classes = [\'Object\', \'Error\'] # list of undeletable classes\n        if $name in $undeletable_classes\n            raise(Error(\'ClassCannotBeDeleted\', \'class "\' + $name + \'" is a builtin class and cannot be deleted\'))\n        endif\n        # delete the class\n        python("del self.classes[self.get_var(\'name\')]")\n    endfunc\nendns'
modules["stdlib.defines"] = '#\n# defines.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\n@doc "Defines a name. First argument is the name and second argument is the value"\nfunc define(string $name, $value)\n    if is_defined($name)\n        raise Error(\'DefineError\', \'name "\' + $name + \'" already defined\')\n        return\n    endif\n    python("self.defines[self.get_var(\'name\')] = self.get_var(\'value\')")\nendfunc\n@doc "Returns all of defined names as a dictionary"\nfunc dict::all_defines\n    return python(\'self.mem = self.defines\')\nendfunc\n@doc "Gets a name and checks is defined and return boolean"\nfunc bool::is_defined(string $name)\n    return $name in list(all_defines()->keys())\nendfunc\n@doc "Deletes a defined name. Gets name as string"\nfunc undefine(string $name)\n    if not is_defined($name)\n        raise Error(\'DefineError\', \'name "\' + $name + \'" is not defined\')\n        return\n    endif\n    python("del self.defines[self.get_var(\'name\')]")\nendfunc\n@doc "Re-Defines a name. If name exists, undefines that and defines new value, and if name currently not exists, defines new name"\nfunc redefine(string $name, $value)\n    if is_defined($name)\n        undefine($name)\n    endif\n    define($name, $value)\nendfunc'
modules["stdlib.exception"] = '#\n# exception.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\n@doc """\\\nA model for error exceptions.\\n\\\nAlso is used by `raise` function.\\n\\\nExample: Error(\'ErrorType\', \'message of error\')\\\n"""\nclass Error\n    $type\n    $message\n    func __init__($type, $message)\n        $this->type = $type\n        $this->message = $message\n    endfunc\n    func str::__str__\n        return $this->type + \': \' + $this->message\n    endfunc\nendclass\n@doc """\\\nRaises a error.\\n\\\nGets a object from `Error` class as error.\\\n"""\nfunc raise(Error $ex)\n\tpython("self.raise_error(\'" + str($ex->type) + "\', \'" + str($ex->message) + "\')")\nendfunc'
modules["stdlib.func"] = '#\n# func.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\n# The function super tools\nnamespace func\n    @doc """\\\n    Returns list of defined functions as list of strings(name of function).\\\n    """\n    func list()\n        # returns list of functions\n        return python("self.mem = list(self.functions.keys())")\n    endfunc\n    @doc """\\\n    Checks a function exists.\\n\\\n    Gets function name as string.\\n\\\n    Returns boolean.\\\n    """\n    func bool::exists(string $name)\n        # checks a function exists or not\n        $name = str($name)\n        return $name in func.list()\n    endfunc\n    @doc """\\\n    Deletes a function.\\n\\\n    Gets function name as string.\\n\\\n    (This Cannot delete builtin functions).\\\n    """\n    func delete(string $name)\n        # deletes a function\n        $name = str($name)\n        if not func.exists($name)\n            raise(Error(\'FunctionNotFound\', \'function "\' + $name + \'" not found\'))\n            return\n        endif\n        $undeletable_functions = [\'func.list\', \'func.delete\', \'func.exists\', \'gset\', \'py_load_file\', \'system\', \'typeof\', \'required\', \'print\', \'import\', \'println\', \'printl\', \'import_once\', \'mem\', \'rmem\', \'python\', \'endns\', \'exit\', \'eval\', \'raise\', \'assert\', \'read\'] # list of undeletable functions\n        if $name in $undeletable_functions\n            raise(Error(\'FunctionCannotBeDeleted\', \'function "\' + $name + \'" is a builtin function and cannot be deleted\'))\n        endif\n        # delete the function\n        python("del self.functions[self.get_var(\'name\')]")\n    endfunc\nendns\n@doc """\\\nFormats arguments of function to a tuple.\\\n"""\nfunc format_args(*$args)\n    if type($args) != tuple\n        $args = $args,\n    endif\n    return $args\nendfunc'
modules["stdlib.io"] = '#\n# io.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\n@doc """\\\nPrints a object on stdout.\\\n"""\nfunc print(*$value)\n    mem self.print($value)\nendfunc\n@doc """\\\nPrints a object on stdout and goes to next line.\\\n"""\nfunc println(*$value)\n    print(str($value) + \'\\n\')\nendfunc\nfunc printl(*$value)\n    println($value)\nendfunc\n@doc """\\\nPrints a object on stderr.\\\n"""\nfunc perror(*$value)\n    mem self.print($value, file=sys.stderr)\nendfunc\n@doc """\\\nPrints a object on a file.\\n\\\nFirst argument is the object that you want to print.\\n\\\nSecond argument is the file that you want to print on, but is optional. default is stdout file.\\\n"""\nfunc printf(*$args)\n    $args = format_args($args)\n    $obj = $args[0]\n    $file = python("self.mem = sys.stdout")\n    if len($args) > 1\n        $file = $args[1]\n    endif\n    $file->write(str($obj))\nendfunc\n@doc """\\\nOpens the output buffer.\\\n"""\nfunc out_start\n    python("self.out_started = True")\nendfunc\n@doc """\\\nCloses the output buffer.\\\n"""\nfunc out_end\n    python("self.out_started = False")\nendfunc\n@doc """\\\nClears the output buffer.\\\n"""\nfunc out_clean\n    python("self.out_content = \'\'")\nendfunc\n@doc """\\\nReturns the output buffer as string.\\\n"""\nfunc out_get\n    python("self.mem = self.out_content")\nendfunc\n@doc """\\\nReturns output buffer and clears that.\\\n"""\nfunc out_get_clean\n    $content = out_get()\n    out_clean()\n    return $content\nendfunc\n@doc """\\\nExits program.\\n\\\nThe argument is the exit code(is optional, default is 0).\\\n"""\nfunc exit(int $code=0)\n    python("self.exit_program(self.get_var(\'code\'))")\nendfunc\n@doc """\\\nReads a input from user from stdin.\\\n"""\nfunc str::read(string $message=\'\')\n    print($message)\n    python("self.io_read()")\nendfunc\n@doc """\\\nDumps a object.\\\n"""\nfunc var_dump(*$obj)\n    python("class Tmp:\\n    def write(self, value):\\n        current_prog.current_prog.print(str(value))\\npprint.pprint(self.get_var(\'obj\'), Tmp())")\nendfunc\n@doc """\\\nPrints something and exits program.\\n\\\nThe first argument is that thing you want to print(Optional,default is null).\\n\\\nThe second argument is exit code(is optional, default is 1).\\\n"""\nfunc die($message=\'\', int $exit_code=1)\n    print($message)\n    exit($exit_code)\nendfunc'
modules["stdlib.obj"] = '#\n# obj.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\n@doc """\\\nIs parent of all of classes.\\\n"""\nclass Object\n    func __init__\n    endfunc\n    func str::__str__\n        return \'[PashmakObject name="\' + $this->__name__ + \'"]\'\n    endfunc\n    @doc """\\\n    Checks is this object instance of a class.\\n\\\n    Gets that class as argument(You can pass class name as string or class object).\\\n    """\n    func bool::isinstanceof($class)\n        if typeof($class) != str\n            $class = $class->__name__\n        endif\n        return $class in $this->__inheritance_tree__\n    endfunc\nendclass\n@doc "Returns value of a variable by name of variable as string"\nfunc get()\n    return python("self.mem = self.get_var(" + repr(^) + ")")\nendfunc\n@doc """\\\nSets value of a variable by name of variable as first argument as string\\\nAnd value as second argument\\\n"""\nfunc set(string $name, $value=null)\n    python("self.frames[-3][\'vars\'][self.get_var(\'name\')] = self.get_var(\'value\')")\nendfunc\nfunc bool::isset()\n    return python(\'self.mem = self.variable_exists(\' + repr(^) + \')\')\nendfunc\n@doc "Makes a copy from an object and returns the copy"\nfunc clone($obj)\n    return copy.deepcopy($obj)\nendfunc'
modules["string"] = '#\n# string.pashm\n#\n# The Pashmak Project\n# This Pashmak module is created by Sam Ghasemi or sami2020pro <samprogram2007@gmail.com> \n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n# \n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nns string\n\tfunc string::concat(str $a, str $b)\n\t\treturn $a + $b\n\tendfunc \n\tfunc string::remove_last(str $str)\n\t\treturn $str[:-1]\n\tendfunc\n\tfunc string::remove_first(str $str)\n\t\treturn $str[1:]\n\tendfunc\n\tfunc string::add_last(str $str, str $new)\n\t\treturn $str + $new\n\tendfunc\n\tfunc string::add_first(str $str, str $new)\n\t\treturn $new + $str\n\tendfunc \n\tfunc int::length(str $str)\n\t\treturn len($str)\n\tendfunc\n\tfunc string::cut(str $str, int $a, int $b)\n\t\treturn $str[$a:$b]\n\tendfunc \n\tfunc string::upcase(str $str)\n\t\treturn $str->upper()\n\tendfunc\n\tfunc string::lowcase(str $str)\n\t\treturn $str->lower()\n\tendfunc\n\tfunc string::reverse(str $str)\n\t\treturn $str[::-1]\n\tendfunc\n\tfunc string::to_str($var)\n\t\treturn repr($var)\n\tendfunc\nendns'
modules["sys"] = '#\n# sys.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nimport @sys.path\nnamespace sys\n    $pashmakinfo = {"version": version.version, "pythoninfo": sys.version.replace("\\\\n", "")}\n    $pashmakexe = sys.argv[0]\nendns'
modules["sys.path"] = '#\n# path.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace sys\n    namespace path\n        @doc """\\\n        Adds a new path to pashmakpath.\\n\\\n        Gets new path as string.\\\n        """\n        func add(str $path)\n            python(\'os.environ["PASHMAKPATH"] += ":\' + str($path) + \':"\')\n            python("self.bootstrap_modules()")\n        endfunc\n        @doc """\\\n        Returns pashmakpath as list of strings.\\\n        """\n        func array[string]::list()\n            $paths_list = python("self.mem = os.environ[\'PASHMAKPATH\'].strip().split(\':\')")\n            $paths_list = [item.strip() for item in $paths_list if item != \'\']\n            return $paths_list\n        endfunc\n    endns\nendns'
modules["test"] = '#\n# test.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace test\n    func doAssert($value)\n        assert($value)\n    endfunc\n    func assertTrue($value)\n        test.doAssert($value)\n    endfunc\n    func assertFalse($value)\n        test.doAssert(not $value)\n    endfunc\n    func assertEquals($a, $b)\n        test.doAssert($a == $b)\n    endfunc\n    func assertNotEquals($a, $b)\n        test.doAssert($a != $b)\n    endfunc\n    func assertEmpty($value)\n        test.doAssert($valie == null)\n    endfunc\n    func assertNotEmpty($value)\n        test.doAssert($valie != null)\n    endfunc\nendns'
modules["time"] = '#\n# time.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace time\n    func float::time()\n        return python("self.mem = time.time()")\n    endfunc\n    func sleep(float $time_to_sleep)\n        python("time.sleep(self.get_var(\'time_to_sleep\'))")\n    endfunc\n    func ctime\n        return python("self.mem = time.ctime()")\n    endfunc\n    func gmtime\n        return python("self.mem = time.gmtime()")\n    endfunc\n    func localtime\n        return python("self.mem = time.localtime()")\n    endfunc\nendnamespace\nif $__ismain__\n    println("Current UNIX timestamp: " + str(time.time()))\nendif'
modules["web"] = '#\n# web.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nimport @os, @web.session\nnamespace web\n@doc """\\\nInitializes the web environment.\\\n"""\nfunc init\n    # load the cookies\n    if \'HTTP_COOKIE\' in list($os.env->keys())\n        $items = urllib.parse.parse_qsl($os.env[\'HTTP_COOKIE\'])\n        $i = 0\n        $cookies = {}\n        while $i < len($items)\n            $cookies[$items[$i][0]] = $items[$i][1]\n            $i = $i + 1\n        endwhile\n        gset(\'web.cookies\', $cookies)\n    else\n        gset(\'web.cookies\', {})\n    endif\n    # parse the GET and POST raw data\n    $raw_get = $os.env[\'QUERY_STRING\'] # load the get query string\n    $tmp_get = urllib.parse.parse_qsl($raw_get)\n    $get = {}\n    $i = 0\n    while $i < len($tmp_get)\n        $get[$tmp_get[$i][0]] = $tmp_get[$i][1]\n        $i = $i + 1\n    endwhile\n    $post = {}\n    if $os.env[\'REQUEST_METHOD\'] == \'POST\'\n        $raw_post = read() # load the post query string\n        # keep the raw data\n        $os.env[\'POST_RAW_DATA\'] = $raw_post\n        # check is the raw post json format\n        $is_json = false\n        try web_init_check_json_error\n            json.loads($raw_post)\n            $is_json = true\n        endtry\n        goto after_web_init_check_json_error; section web_init_check_json_error\n            $is_json = false\n        section after_web_init_check_json_error\n        if $is_json\n            $post = json.loads($raw_post)\n        else\n            $tmp_post = urllib.parse.parse_qsl($raw_post)\n            $i = 0\n            while $i < len($tmp_post)\n                $post[$tmp_post[$i][0]] = $tmp_post[$i][1]\n                $i = $i + 1\n            endwhile\n        endif\n    endif\n    gset(\'web.get\', $get)\n    gset(\'web.post\', $post)\n    define(\'WEB_INITED\', true)\n    set_header(\'Content-type\', \'text/html\')\nendfunc\n@doc """\\\nSets a http header.\\n\\\nFirst argument is name of header and last is value(both string).\\\n"""\nfunc set_header(string $name, $value)\n    if is_defined(\'WEB_END_HEADERS\')\n        raise(Error(\'HeaderError\', \'headers already sent\'))\n        return\n    endif\n    print(str($name) + \': \' + str($value) + \'\\n\')\nendfunc\n@doc """\\\nSets http response code.\\n\\\nGets code as int.\\\n"""\nfunc status(int $code)\n    set_header(\'Status\', str($code))\nendfunc\n@doc """\\\nSets a HTTP cookie.\\n\\\nGets options as dictionary.\\\n"""\nfunc set_cookie(dict $options)\n    $options->setdefault(\'value\', \'\')\n    # format options\n    $tmp = urllib.parse.urlencode([\n        ($options[\'name\'], $options[\'value\'])\n    ])->split(\'=\', 1)\n    $options[\'name\'] = $tmp[0]\n    $options[\'value\'] = $tmp[1]\n    $base_cookie = http.cookies.BaseCookie()\n    $base_cookie[$options[\'name\']] = $options[\'value\']\n    $i = 0\n    $keys = list($options->keys())\n    while $i < len($keys)\n        if $keys[$i] not in [\'name\', \'value\']\n            $base_cookie[$options[\'name\']][$keys[$i]] = $options[$keys[$i]]\n        endif\n        $i = $i + 1\n    endwhile\n    $output = $base_cookie->output()\n    $output = $output->split(\':\', 1)[-1]->strip()->split(\'=\', 1)\n    set_header(\'Set-Cookie\', $output[0]->strip() + \'=\' + $output[-1])\n    $real_cookies = gget(\'web.cookies\')\n    $tmp = urllib.parse.parse_qsl($output[0]->strip() + \'=\' + $output[-1])\n    $real_cookies[$tmp[0][0]] = $tmp[0][1]\nendfunc\n@doc "Ends the headers"\nfunc end_headers()\n    println(\'\')\n    define(\'WEB_END_HEADERS\', true)\nendfunc\nendns'
modules["web.server"] = '#\n# server.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace web; namespace server\n    class WebServer\n        func __init__(str $host, int $port=8000)\n            $this->host = $host\n            $this->port = $port\n            $this->do_get = null\n            $this->do_post = null\n        endfunc\n        func web.server.WebServer::set_get($func)\n            $this->do_get = $func\n            return $this\n        endfunc\n        func web.server.WebServer::set_post($func)\n            $this->do_post = $func\n            return $this\n        endfunc\n        func serve\n            $py_code = \'\\\ndef serve(host, port, do_get=None, do_post=None):\\n\\\n    class TheServer(http.server.BaseHTTPRequestHandler):\\n\\\n        def do_GET(self):\\n\\\n            if self.get_event != None:\\n\\\n                self.get_event(self)\\n\\\n\\\n        def do_POST(self):\\n\\\n            if self.post_event != None:\\n\\\n                self.post_event(self)\\n\\\n\\\n    tmp_TheServer = copy.deepcopy(TheServer)\\n\\\n    tmp_TheServer.get_event = do_get\\n\\\n    tmp_TheServer.post_event = do_post\\n\\\n    webServer = http.server.HTTPServer((host, port), tmp_TheServer)\\n\\\n    return webServer\\n\\\nself.mem = serve(self.get_var("this").host, self.get_var("this").port, self.get_var("this").do_get, self.get_var("this").do_post)\\n\\\n            \'\n            $this->server = python($py_code)\n            $this->server->serve_forever()\n        endfunc\n    endclass\nendns; endns\nif $__ismain__\n    import @sys, @os\n    if \'--help\' in $argv\n        println(\'Serve a simple webserver for development environment\')\n        println(\'\')\n        println(\'Usage:   pashmak @serve <port>\')\n        println(\'         pashmak @serve <host> <port>\')\n        println(\'         pashmak @serve <host> <port> <directory>\')\n        println(\'         pashmak @serve <host> <port> <directory> <main-script: main file is request handler>\')\n        println(\'Example: pashmak @serve 8080\')\n        println(\'         pashmak @serve 0.0.0.0 8080\')\n        println(\'         pashmak @serve 0.0.0.0 8080 path/to/public/html\')\n        println(\'         pashmak @serve 0.0.0.0 8080 path/to/public/html path/to/public/html/server.pashm\')\n        exit()\n    endif\n    $port = 8000\n    $host = \'localhost\'\n    $dir = os.getcwd()\n    $main = null\n    if len($argv) > 2\n        $host = $argv[1]\n        $port = int($argv[2])\n        if len($argv) > 3\n            $dir = $argv[3]\n            if len($argv) > 4\n                $main = $argv[4]\n            endif\n        endif\n    elif len($argv) > 1\n        $port = int($argv[1])\n    endif\n    $server = web.server.WebServer($host, $port)\n    func get_handler($handler)\n        the_handler($handler, \'GET\')\n    endfunc\n    func post_handler($handler)\n        the_handler($handler, \'POST\')\n    endfunc\n    # a handler for POST and GET methods\n    func the_handler($handler, str $request_method)\n        $path = str($handler->path)\n        $path = $path->split(\'?\', 1)\n        $query_string = \'\'\n        if len($path) > 1\n            $query_string = $path[1]\n        endif\n        $path = $path[0]\n        $has_index = false\n        if os.path.isdir($dir + \'/\' + $path)\n            $allowed_indexes = [\'index.pashm\', \'index.pit\', \'index.pashm.html\', \'html\']\n            $z = 0\n            while $z < len($allowed_indexes)\n                if os.path.isfile($dir + \'/\' + $path + \'/\' + $allowed_indexes[$z])\n                    $has_index = $dir + \'/\' + $path + \'/\' + $allowed_indexes[$z]\n                    break\n                endif\n                $z = $z + 1\n            endwhile\n        endif\n        if os.path.isfile($dir + \'/\' + $path) or $main != null or $has_index\n            if $has_index\n                $full_path = $has_index\n            else\n                $full_path = os.path.abspath($dir + \'/\' + $path)\n            endif\n            $full_path = $full_path->replace(\'//\', \'/\')\n            $full_path = $full_path->replace(\'//\', \'/\')\n            $mime = mimetypes.guess_type($full_path)[0]\n            if $full_path->endswith(\'.pashm\') or $full_path->endswith(\'.pit\') or $full_path->endswith(\'.pashm.html\') or $main != null\n                if $main != null\n                    $full_path = $main\n                endif\n                $command = [$sys.pashmakexe, repr($full_path)]\n                $f = open($full_path, \'r\')\n                $content = $f->read()\n                $f->close()\n                if $content->split(\'\\n\', 1)[0]->endswith(\'@pit\') and $content->split(\'\\n\', 1)[0]->startswith(\'#!/\')\n                    $command->insert(1, \'@pit\')\n                endif\n                # the envvars\n                $env = {\n                    "PASHMAKPATH": $os.env[\'PASHMAKPATH\'],\n                    "REQUEST_URI": $handler->path,\n                    "REQUEST_METHOD": $request_method,\n                    "REMOTE_ADDR": $handler->client_address[0],\n                    "REMOTE_PORT": str($handler->client_address[1]),\n                    "SERVER_PORT": str($handler->server->server_port),\n                    "SERVER_SOFTWARE": \'Pashmak Builtin Web Server (\' + $sys.pashmakinfo[\'version\'] + \')\',\n                    "SERVER_SIGNATURE": \'Pashmak Builtin Web Server (\' + $sys.pashmakinfo[\'version\'] + \')\',\n                    \'DOCUMENT_ROOT\': $dir,\n                    \'CONTEXT_DOCUMENT_ROOT\': $dir,\n                    \'SCRIPT_FILENAME\': $full_path,\n                    \'SCRIPT_NAME\': $path,\n                    \'QUERY_STRING\': $query_string,\n                    "SERVER_PROTOCOL": $handler->protocol_version,\n                    "REQUEST_SCHEME": \'http\',\n                    "SERVER_NAME": $host,\n                    "SERVER_ADDR": \'127.0.0.1\' if $host == \'localhost\' else $host,\n                }\n                # load request headers\n                $request_headers = str($handler->headers)->strip()->split(\'\\n\')\n                $i = 0\n                while $i < len($request_headers)\n                    $key = $request_headers[$i]->split(\':\', 1)\n                    $value = $key[-1]\n                    $key = $key[0]\n                    $key = \'HTTP_\' + $key->replace(\'-\', \'_\')->upper()\n                    $env[$key] = $value->strip()\n                    $i = $i + 1\n                endwhile\n                $post_data = \'\'\n                if $request_method == \'POST\'\n                    $post_data = $handler->rfile->read(int($env[\'HTTP_CONTENT_LENGTH\']))\n                endif\n                $result = subprocess.Popen(\' \'->join($command), stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, env=$env, shell=true)\n                $result = $result->communicate(input=$post_data)\n                $result = $result[0]\n                $headers = []\n                $tmp_cookies = str($result->decode())->strip()->split(\'\\n\\n\', 1)[0]->strip()->split(\'\\n\')\n                $i = 0\n                $res_code = 200\n                while $i < len($tmp_cookies)\n                    $key = $tmp_cookies[$i]->split(\':\', 1)\n                    $value = $key[-1]\n                    $key = $key[0]\n                    if $key == \'Status\'\n                        $res_code = int($value)\n                    else\n                        $headers->append([$key->strip(), $value->strip()])\n                    endif\n                    $i = $i + 1\n                endwhile\n                $i = 0\n                $handler->send_response($res_code)\n                while $i < len($headers)\n                    $handler->send_header($headers[$i][0], $headers[$i][1])\n                    $i = $i + 1\n                endwhile\n                $handler->end_headers()\n                $handler->wfile->write(\n                    str($result->decode())->strip()->split(\'\\n\\n\', 1)[-1]->encode()\n                )\n                return\n            endif\n            try handle_file_error\n                $f = open($full_path, \'r\')\n                $content = $f->read()\n                $f->read()\n            endtry\n            goto after_handle_file_error; section handle_file_error\n                $handler->send_response(403)\n                $handler->send_header("Content-type", "text/html")\n                $handler->end_headers()\n                $handler->wfile->write(bytes(\'403 - Access Denied\', "utf-8"))\n                return\n            section after_handle_file_error\n            $handler->send_response(200)\n            if $mime == null\n                $mime = \'text/plain\'\n            endif\n            $handler->send_header("Content-type", $mime)\n            $handler->end_headers()\n            $handler->wfile->write(bytes($content, "utf-8"))\n            return\n        else\n            $handler->send_response(404)\n            $handler->send_header("Content-type", "text/html")\n            $handler->end_headers()\n            $handler->wfile->write(bytes(\'404 - Not Found\', "utf-8"))\n            return\n        endif\n    endfunc\n    # set request handlers\n    $server->set_get(get_handler)\n    $server->set_post(post_handler)\n    # start the server\n    println(\'Serving the development server on http://\' + $host + \':\' + str($port) + \' - Do not use this on production\')\n    $server->serve()\nendif'
modules["web.session"] = '#\n# session.pashm\n#\n# The Pashmak Project\n# Copyright 2020-2021 parsa shahmaleki <parsampsh@gmail.com>\n#\n# This file is part of Pashmak.\n#\n# Pashmak is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Pashmak is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.\n#########################################################################\nnamespace web\n    @doc "\\\n    Loads the session dictionary by unique id.\\\n    "\n    func dict::load_session_by_id(string $id)\n        return {}\n    endfunc\n    @doc "\\\n    Generates a random session Id and returns it.\\\n    "\n    func string::generate_random_session_id()\n        return \'...\'\n    endfunc\n    @doc "\\\n    Creates a new session and returns the ID.\\n\\\n    Also can get a optional custom ID.\\\n    "\n    func string::create_session(string $custom_id=null)\n        if $custom_id is null\n            $custom_id = generate_random_session_id()\n        endif\n        return $custom_id\n    endfunc\nendns'
