#
# random.pashm
#
# The Pashmak Project
# This Pashmak module is developed by Amirmohammad Ghazi dizaji <amirghazi1387@gmail.com> 
# Copyright 2020 parsa shahmaleki <parsampsh@gmail.com>
# 
# This file is part of Pashmak.
#
# Pashmak is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Pashmak is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.
#########################################################################

namespace random
    @doc """\
    Generates a random number between x and y.\n\
    First and second arguments are x and y as number.\
    """
    func randint($a, $b)
        python("self.mem = random.randint(self.get_var('a'), self.get_var('b'))")
    endfunc

    @doc """\
    Initializes Random number generator.\n\
    Gets seed as integer.\
    """
    func seed($a)
        python("random.seed(self.get_var('a'))")
    endfunc

    @doc """\
    Returns the current internal state of the random number generator.\
    """
    func getstate()
        python("self.mem = random.getstate()")
    endfunc

    func setstate($state)
        python("random.setstate(self.get_var('state'))")
    endfunc

    func getrandbits($a)
        python("self.mem = random.getrandbits(self.get_var('a'))")
    endfunc

    func randrange($a, $b)
        python("self.mem = random.randrange(self.get_var('a'), self.get_var('b'))")
    endfunc

    ### TODO : fix bug of this functions
    ### func choice($a)
    ###     python("self.mem = random.choice(self.get_var('a'))")
    ### endfunc
    ###
    ### func choices($a, $b, $c, $d)
    ###     python("self.mem = random.choices(self.get_var('a'), self.get_var('b'), self.get_var('c'), self.get_var('d'))")
    ### endfunc
    
    func shuffle($a, $b)
        python("random.shuffle(self.get_var('a'), self.get_var('b'))")
    endfunc

    func sample($a, $b)
        python("self.mem = random.sample(self.get_var('a'), self.get_var('b'))")
    endfunc

    func uniform($a, $b)
        python("self.mem = random.uniform(self.get_var('a'), self.get_var('b'))")
    endfunc

    func triangular($a $b, $c)
        python("self.mem = random.triangular(self.get_var('a'), self.get_var('b'), self.get_var('c'))")
    endfunc

    @doc """\
    Generates a random float less that 1.\
    """
    func random()
        python("self.mem = random.random()")
    endfunc
endns
