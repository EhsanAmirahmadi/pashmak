#
# stdlib.pashm
#
# The Pashmak Project
# Copyright 2020 parsa shahmaleki <parsampsh@gmail.com>
#
# This file is part of Pashmak.
#
# Pashmak is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Pashmak is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pashmak.  If not, see <https://www.gnu.org/licenses/>.
#########################################################################

class Object
    func __init__
    endfunc

    func __str__
        return '[PashmakObject name="' + $this->__name__ + '"]'
    endfunc
endclass

func print
    mem self.print(^)
endfunc

func import
    mem self.import_script(^)
endfunc

func import_once
    mem self.import_script(^, True)
endfunc

func exit($code)
    if typeof($code) != int
        $code = 0
    endif
    python("self.exit_program(self.get_var('code'))")
endfunc

func eval
    mem self.pashmak_eval(^)
endfunc

func endns
    endnamespace
endfunc

func raise($exdata)
	python("self.raise_error('" + str($exdata->type) + "', '" + str($exdata->message) + "')")
endfunc

func assert($value)
    if not $value
        raise(Error('AssertError', 'asserting that false is true'))
    endif
endfunc

func gset($args)
	python('self.threads[0]["vars"]["' + str($args[0]) + '"] = self.get_var("args")[1]')
endfunc

func println($value)
    print(str($value) + '\\n')
endfunc

func printl($value)
    println($value)
endfunc

func cwd
    python("self.mem = os.getcwd()")
endfunc

func chdir($path)
    python("self.mem = os.chdir(self.get_var('path'))")
endfunc

func typeof($obj)
    python("self.mem = type(self.get_var('obj'))")
endfunc

func system($cmd)
    python("self.mem = os.system(self.get_var('cmd'))")
endfunc

func python
    rmem exec(^)
endfunc

func required
endfunc

func read
    read
endfunc

func py_load_file($path)
	python("import importlib.util\; spec = importlib.util.spec_from_file_location('pyloadedfile', self.get_var('path'))\; m = importlib.util.module_from_spec(spec)\; spec.loader.exec_module(m)\; self.mem = m")
endfunc

func fopen($args)
    if typeof($args) != tuple
        $args = [$args]
    endif

    $path = $args[0]
    if len($args) > 1
        $type = $args[1]
    else
        $type = 'r'
    endif

    python("self.mem = open(self.get_var('path'), self.get_var('type'))")
endfunc

class Error
    $type
    $messae

    func __init__($args)
        $this->type = $args[0]
        $this->message = $args[1]
    endfunc

    func __str__
        return $this->type + ': ' + $this->message
    endfunc
endclass

# The function super tools
namespace func
    func list
        # returns list of functions
        python("self.mem = list(self.functions.keys())")
    endfunc

    func exists($name)
        # checks a function exists or not
        $name = str($name)
        return $name in func.list()
    endfunc

    func delete($name)
        # deletes a function
        $name = str($name)
        if not func.exists($name)
            raise(Error('FunctionNotFound', 'function "' + $name + '" not found'))
            return
        endif

        $undeletable_functions = ['func.list', 'func.delete', 'func.exists', 'gset', 'py_load_file', 'system', 'typeof', 'required', 'print', 'import', 'println', 'printl', 'import_once', 'mem', 'rmem', 'python', 'endns', 'exit', 'eval', 'raise', 'assert', 'read'] # list of undeletable functions
        if $name in $undeletable_functions
            raise(Error('FunctionCannotBeDeleted', 'function "' + $name + '" is a builtin function and cannot be deleted'))
        endif

        # delete the function
        python("del self.functions[self.get_var('name')]")
    endfunc
endns

# The class super tools
namespace class
    func list
        # returns list of classes
        python("self.mem = list(self.classes.keys())")
    endfunc

    func exists($name)
        # checks a class exists or not
        $name = str($name)
        return $name in class.list()
    endfunc

    func delete($name)
        # deletes a class
        $name = str($name)
        if not class.exists($name)
            raise(Error('ClassNotFound', 'class "' + $name + '" not found'))
            return
        endif

        $undeletable_classes = ['Object', 'Error'] # list of undeletable classes
        if $name in $undeletable_classes
            raise(Error('ClassCannotBeDeleted', 'class "' + $name + '" is a builtin class and cannot be deleted'))
        endif

        # delete the class
        python("del self.classes[self.get_var('name')]")
    endfunc
endns
